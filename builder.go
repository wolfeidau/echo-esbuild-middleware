package assets

import (
	"fmt"
	"time"

	"github.com/evanw/esbuild/pkg/api"
)

type BuildConfig struct {
	EntryPoints     []api.EntryPoint
	Outdir          string
	InlineSourcemap bool
	Define          map[string]string
	Format          api.Format
	// This will be invoked for a build and can be used to check errors/warnings
	OnBuild FuncBuildResult
}

func (bc BuildConfig) sourcemap() api.SourceMap {
	if bc.InlineSourcemap {
		return api.SourceMapInline
	}
	return api.SourceMapNone
}

// BuildWithConfig this function will trigger a build using esbuild using similar simplified params to the middleware, however the output
// will be written to a local directory which is typically a public assets folder.
func BuildWithConfig(cfg BuildConfig) error {
	start := time.Now()

	result := api.Build(api.BuildOptions{
		Banner: map[string]string{
			"js": `/* generated by github.com/wolfeidau/echo-esbuild-middleware */`,
		},
		Bundle:              true,
		EntryPointsAdvanced: cfg.EntryPoints,
		Outdir:              cfg.Outdir,
		Write:               true,
		MinifyWhitespace:    true,
		MinifyIdentifiers:   true,
		MinifySyntax:        true,
		Sourcemap:           cfg.sourcemap(),
		Define:              cfg.Define,
		Format:              cfg.Format,
	})

	if cfg.OnBuild != nil {
		cfg.OnBuild(result, time.Since(start))
	}

	if len(result.Errors) > 0 {
		return fmt.Errorf("build failed: %v", result.Errors)
	}

	return nil
}
